import { StateQueryProof as GrpcStateQueryProof, ContractVarProof as GrpcContractVarProof } from '../../types/blockchain_pb';
export declare type BasicType = number | string | boolean | null;
export interface JsonData {
    [prop: string]: BasicType | BasicType[] | JsonData[] | JsonData;
}
declare class ContractVarProof {
    inclusion: boolean;
    key: Uint8Array;
    value?: JsonData | BasicType;
    proofKey: Uint8Array;
    proofVal: Uint8Array;
    bitmap: Uint8Array;
    height: number;
    auditPath: Uint8Array[];
    constructor(data: Partial<ContractVarProof>);
    static fromGrpc(grpcObject: GrpcContractVarProof): ContractVarProof;
    toGrpc(): never;
}
export default class StateQueryProof {
    contractProof: ContractVarProof;
    varProofs: ContractVarProof[];
    constructor(data: Partial<StateQueryProof>);
    static fromGrpc(grpcObject: GrpcStateQueryProof): StateQueryProof;
    toGrpc(): never;
}
export {};
