import { SignedTx } from './tx';
import { Block as GrpcBlock } from '../../types/blockchain_pb';
import Address from './address';
import { Amount } from '@herajs/common';
export interface BlockHeader {
    chainid: string;
    prevblockhash: string;
    blockno: number;
    timestamp: number;
    blocksroothash: string;
    txsroothash: string;
    receiptsroothash: string;
    confirms: number;
    pubkey: string;
    sign: Uint8Array | string;
    coinbaseaccount: Address;
    rewardaccount: Address;
}
export interface BlockBody {
    txsList: SignedTx[];
}
export default class Block {
    hash: string;
    header: BlockHeader;
    body: BlockBody;
    constructor(data: Partial<Block>);
    static fromGrpc(grpcObject: GrpcBlock): Block;
    toGrpc(): never;
    static encodeHash(bytes: Uint8Array): string;
    static decodeHash(bs58string: string): Uint8Array;
    static getVoteReward(block: {
        header?: BlockHeader;
    }): Amount;
    readonly voteReward: Amount;
}
