import { Tx as GrpcTx, TxTypeMap } from '../../types/blockchain_pb';
import Address from './address';
import { Amount, TxBody } from '@herajs/common';
declare type TxTypeValue = TxTypeMap[keyof TxTypeMap];
/**
 * Class for converting transaction data to and from network representation.
 * You usually don't need to interact with this class manually, you can pass simple JSON objects.
 * This class is used when passing transaction data to client methods.
 */
export default class Tx {
    /**
     * Map of tx types.
     * Use as Tx.Type.NORMAL, Tx.Type.GOVERNANCE, Tx.Type.REDEPLOY, Tx.Type.FEEDELEGATION
     */
    static readonly Type: TxTypeMap;
    hash?: string;
    nonce: number;
    from: Address | string;
    to: Address | string | null;
    amount: Amount;
    payload?: Uint8Array | string;
    sign?: string;
    type?: TxTypeValue;
    limit?: number;
    price: Amount;
    chainIdHash: string;
    constructor(data: TxBody);
    static encodeHash(buf: Uint8Array): string;
    static fromGrpc(grpcObject: GrpcTx): Tx;
    /**
     * Infer a tx type based on body. Can be overriden by exlicitly passing type.
     */
    private inferType;
    toGrpc(): GrpcTx;
}
export declare class SignedTx extends Tx {
    sign: string;
    hash: string;
}
export {};
